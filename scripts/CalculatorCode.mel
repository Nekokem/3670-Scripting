{
global proc float[] SortList(float $list[])
{
    float $len = `size($list)`;
    float $temp = 0;
    int $x;
    int $i;
    for($i=0;$i<$len-1;$i++)
    {
       
        for($x=0;$x<$len-$i-1;$x++)
        {
            if($list[$x]>$list[$x+1])
            {
                
                $temp = $list[$x];
                $list[$x] = $list[$x+1];
                $list[$x+1] = $temp;
            }
        }
      
        
    }
    return $list;
}

proc float AddValue(float $num[])
{
       
       float $sum = $num[0];
       for($i=0; $i<size($num); $i++)
       {
           $sum += $num[$i];
       }
       return $sum;
}
float $numberAdd = AddValue ({10,4});
print $numberAdd;


proc float SubValue(float $num[])
{
       
       float $sum = $num[0];
       for($i=1; $i<size($num); $i++)
       {
           $sum -= $num[$i];
       }
       return $sum;
}
float $numberSub = SubValue ({10,7});
print $numberSub;


proc float MultValue(float $num[])
{
       
       float $sum = $num[0];
       for($i=0; $i<size($num); $i++)
       {
           $sum *= $num[$i];
       }
       return $sum;
}
float $numberMult = MultValue ({4,8});
print $numberMult;
global proc float[] SortList(float $list[])
{
    float $len = `size($list)`;
    float $temp = 0;
    int $x;
    int $i;
    for($i=0;$i<$len-1;$i++)
    {
       
        for($x=0;$x<$len-$i-1;$x++)
        {
            if($list[$x]>$list[$x+1])
            {
                
                $temp = $list[$x];
                $list[$x] = $list[$x+1];
                $list[$x+1] = $temp;
            }
        }
      
        
    }
    return $list;
}


proc float DivValue(float $num[])
{
       
   float $result = $num[0];
   
       for($i=1; $i<size($num); $i++)
       {
           $result /= $num[$i];
       }
       
       return $result;
}
float $numberDiv2 = DivValue ({18,2});
print $numberDiv2;

proc float ModValue(float $dividend, float $divisor)
{       
       return $dividend % $divisor;
}
float $numberMod3 = ModValue (10,3);
print $numberMod3;

proc float AverageNum(float $num[])
{
    float $result = AddValue($num);
    return $result / size($num);

}

float $numberAve = AverageNum ({5,7,3,2,5,6});
print $numberAve;


proc float Power(float $base, float $numPower)
{
   float $result = 1;  
   for($i=0; $i<$numPower; $i++)
   {
       $result *= $base;
       
   }
   return $result;

}
float $numberPower = Power (10,3);
print $numberPower;

proc float Mode(float $num[])
{ 
    int $repitition[];
    int $len = `size($num)`;
    
    for($i=0; $i<$len; $i++)
    {
        $repitition[$i] = 0;
    }
    
    for ($i = 0; $i < $len; ++$i) 
    {
        int $j = 0;
        while (($j < $i) && ($num[$i] != $num[$j]))
         {
            if ($num[$i] != $num[$j]) {
                ++$j;
            }
        }
        int $temp = $repitition[$j];
        $temp++;
        $repitition[$j] = $temp;
    }
    
    int $MaxRepeat = 0;
    
    for ($i = 1; $i < $len; ++$i) 
    {
        if ($repitition[$i] > $repitition[$MaxRepeat]) 
        {
            $MaxRepeat = $i;
        }
    }
    
    return $num[$MaxRepeat];   
}
float $numberMode = Mode({10,4,5,6,8,6,9,2,6,2,2});
print $numberMode;


proc float Median(float $num[])
{
    float $sorted[] = SortList($num);
    int $len = `size($sorted)`;
    if (($len % 2) != 0)
    { 
       return $sorted[$len/2]; 
    }  
    return ($sorted[($len-1)/2] + $sorted[$len/2])/2.0;
    
}
float $numberMed2 = Median ({10,4,3});
print $numberMed2;

global proc float calculator(float $numbs[], string $operation)
{
    float result;
    if($operation == "add")
    {
        result = `AddValue($numbs)`;
    }
    else if($operation == "subtract")
    {
        result = `SubValue($numbs)`;
    }
    else if($operation == "multiply")
    {
        result = `MultValue($numbs)`;
    }
    else if($operation == "divide")
    {
        result = `DivValue($numbs)`;
    }
    else if($operation == "divide")
    {
        result = `DivValue($numbs)`;
    }
    else if($operation == "module")
    {
        result = `ModValue($numbs)`;
    }
    else if($operation == "avgerage")
    {
        result = `AverageNum($numbs)`;
    }
    else if($operation == "exponent")
    {
        result = `Power($numbs)`;
    }
    else if($operation == "mode")
    {
        result = `Mode($numbs)`;
    }
    else if($operation == "median")
    {
        result = `Median($numbs)`;
    }
    
    return result;
    
    
}

}